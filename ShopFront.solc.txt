pragma solidity ^0.4.4;

contract ShopFront {
    
    address private pOwner; 
    address private pAdministrator; 

    struct Product {
           uint productId;
           bool isAvailable;
           bytes32 name;
           uint price;
           uint stock;
     } 

    Product[] public inventory;

    function ShopFront(address Administrator) payable {
            pOwner = msg.sender;
            pAdministrator = Administrator;
        }
    
    modifier isAdministrator() {
            if (msg.sender != pAdministrator) {
                throw;
            }
            _;
        }
        
    modifier isAvailable(uint parId) {
            if (!inventory[parId].isAvailable) {
                throw;
            }
            _;
        }        
    
    modifier isInStock(uint parId, uint parQuantity) {
            if (parQuantity > inventory[parId].stock) {
                throw;
            }
            _;
        }        
        
    modifier isTotalPriceCorrect(uint parId, uint parQuantity, uint parTotalPrice) {
            if (parTotalPrice != (inventory[parId].price * parQuantity)) {
                throw;
            }
            _;
        }

    function buyProduct(address parContract, uint parId, uint parQuantity) 
        isAvailable(parId)
        isInStock(parId, parQuantity)
        isTotalPriceCorrect(parId, parQuantity, msg.value) payable {
            inventory[parId].stock -= parQuantity; 
    }
        
    function addProduct(uint parId, bool parIsAvailable, bytes32 parName, uint parPrice, uint parStock) 
        isAdministrator() {
            inventory.push(Product({
                productId: parId,
                isAvailable: parIsAvailable,
                name: parName,
                price: parPrice,
                stock: parStock
            }));
    }
    
    function updateAvailability(uint parId, bool parIsAvailable) 
        isAdministrator() {
            inventory[parId].isAvailable = parIsAvailable;
    }
    
    function updatePrice(uint parId, uint parPrice) 
        isAdministrator() {
            inventory[parId].price = parPrice;
    }
    

}

